{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}

{{/* Upstream template */}}
{{ define "upstream" }}
	{{ if .Address }}
		{{/* If we got the containers from swarm and this container's port is published to host, use host IP:PORT */}}
		{{ if and .Container.Node.ID .Address.HostPort }}

		# {{ .Container.Node.Name }}/{{ .Container.Name }}
		server {{ .Container.Node.Address.IP }}:{{ .Address.HostPort }};

		{{/* If there is no swarm node or the port is not published on host, use container's IP:PORT */}}
		{{ else if .Network }}

		# {{ .Container.Name }}
		server {{ .Network.IP }}:{{ .Address.Port }};

		{{ end }}
	{{ else if .Network }}

		# {{ .Container.Name }}
		server {{ .Network.IP }} down;

	{{ end }}
{{ end }}

{{/* HTTP server template */}}
{{ define "http" }}
	## HTTP
	server {
		listen 80;
		{{ range $host := split .Hosts "," }}

		server_name {{ $host }};

		{{ end }}

		location / {
			proxy_pass http://{{ .Upstream }};
		}
	}
{{ end }}

{{/* HTTPS server template */}}
{{ define "https" }}
	## HTTPS
	server {

		listen 443 ssl http2;
		{{ range $host := split .Hosts "," }}

		server_name {{ $host }};

		{{ end }}

		{{ $cert := (printf "/etc/nginx/certs/%s.crt" .Cert) }}
		{{ $certKey := (printf "/etc/nginx/certs/%s.key" .Cert) }}

		{{/* Use custom cert if it exist */}}
		{{/* E.g. /etc/nginx/certs/example.com.crt and /etc/nginx/certs/example.com.key */}}
		{{ if (and (exists $cert) (exists $certKey)) }}

		ssl_certificate           {{ $cert }};
		ssl_certificate_key       {{ $certKey }};

		{{/* Use default self-signed cert otherwise */}}
		{{ else }}

		#ssl_certificate           /etc/nginx/server.crt;
		#ssl_certificate_key       /etc/nginx/server.key;
		ssl_certificate           /etc/nginx/certs/x.docksal.io.crt;
		ssl_certificate_key       /etc/nginx/certs/x.docksal.io.key;

		{{ end }}

		ssl_session_cache  builtin:1000  shared:SSL:10m;
		ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
		ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
		ssl_prefer_server_ciphers on;

		location / {
			proxy_pass http://{{ .Upstream }};
		}
	}
{{ end }}

{{/* END: Variables */}}

{{/* Support Docker Compose project containers */}}

{{ $dc_containers := whereLabelExists $ "com.docker.compose.service" }}

{{ range $hosts, $containers_vhost := groupByLabel $dc_containers "io.docksal.virtual-host" }}

	{{ range $service, $containers := groupByLabel $containers_vhost "com.docker.compose.service" }}
		{{ $pr_container := $containers | first }}
		{{ $project := index $pr_container.Labels "com.docker.compose.project" }}
		{{ $upstream := (print $project "-" $service) }}

	# -------------------------------------------------- #
	# Reachable via "{{ $project }}_default" network
	upstream {{ $upstream }} {
		{{ range $container := $containers }}
			{{ $addrLen := len $container.Addresses }}

			{{ range $knownNetwork := $CurrentContainer.Networks }}
				{{ range $containerNetwork := $container.Networks }}
					{{ if eq $knownNetwork.Name $containerNetwork.Name }}
						{{/* If only 1 port exposed, use that */}}
						{{ if eq $addrLen 1 }}
							{{ $address := index $container.Addresses 0 }}
							{{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
						{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
						{{ else }}
							{{/* Assume port 80 by default */}}
							{{ $port := or (index $container.Labels "io.docksal.virtual-port") "80" }}
							{{ $address := where $container.Addresses "Port" $port | first }}
							{{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
						{{ end }}
					{{ end }}
				{{ end }}
			{{ end }}
		{{ end }}
	}

		{{/* Generate HTTP server config */}}
		{{ template "http" (dict "Hosts" $hosts "Upstream" $upstream) }}

		{{/* Get the cert name from io.docksal.cert-name container label */}}
		{{ $certName := (index $pr_container.Labels "io.docksal.cert-name") }}

		{{/* Get the best matching cert  by name for the vhost. */}}
		{{ $primaryHost := (index (split $hosts ",") 0) }}
		{{ $vhostCert := (closest (dir "/etc/nginx/certs") (printf "%s.crt" $primaryHost)) }}

		{{/* Trim file suffix - it will be added later */}}
		{{ $vhostCert := trimSuffix ".crt" $vhostCert }}
		{{ $vhostCert := trimSuffix ".key" $vhostCert }}

		{{/* Allow certs from the project's repo */}}
		{{ $projectCrt := (printf "/projects/%s/certs/server.crt" $project) }}
		{{ $projectKey := (printf "/projects/%s/certs/server.key" $project) }}

		{{ if and (exists $projectCrt) (exists $projectKey) }}

		{{/* Trim file suffix - it will be added later */}}
		{{ $projectCert := trimSuffix ".crt" $projectCrt }}

		{{/* Generate HTTPS server config */}}
		{{ template "https" (dict "Hosts" $hosts "Upstream" $upstream "Cert" $projectCert) }}

		{{ else }}

		{{/* Use the cert specified on the container or fallback to the best vhost match */}}
		{{ $cert := (coalesce $certName $vhostCert) }}
		{{/* Generate HTTPS server config */}}
		{{ template "https" (dict "Hosts" $hosts "Upstream" $upstream "Cert" $cert) }}

		{{ end }}

	{{ end }}
	# -------------------------------------------------- #

{{ end }}

{{/* END: Support Docker Compose project containers */}}

{{/* Support standalone Docker containers */}}

{{ $d_containers := whereLabelDoesNotExist $ "com.docker.compose.service" }}

{{ range $hosts, $containers := groupByLabel $d_containers "io.docksal.virtual-host" }}

	{{ range $host := split $hosts "," }}

	upstream {{ $host }} {
		{{ range $container := $containers }}
			{{ $addrLen := len $container.Addresses }}

			{{ range $knownNetwork := $CurrentContainer.Networks }}
				{{ range $containerNetwork := $container.Networks }}
					{{ if eq $knownNetwork.Name $containerNetwork.Name }}
						{{/* If only 1 port exposed, use that */}}
						{{ if eq $addrLen 1 }}
							{{ $address := index $container.Addresses 0 }}
							{{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
						{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
						{{ else }}
							{{/* Assume port 80 by default */}}
							{{ $port := or (index $container.Labels "io.docksal.virtual-port") "80" }}
							{{ $address := where $container.Addresses "Port" $port | first }}
							{{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
						{{ end }}
					{{ end }}
				{{ end }}
			{{ end }}
		{{ end }}
	}

		{{ template "http" (dict "Hosts" $host "Upstream" $host) }}

		{{ if (and (exists "/etc/nginx/server.crt") (exists "/etc/nginx/server.key")) }}
			{{ template "https" (dict "Hosts" $host "Upstream" $host) }}
		{{ end }}

	{{ end }}

{{ end }}

{{/* END: Support standalone Docker containers */}}